GitFlowGuide
============
`Tag v0.032`

A general guide on how to use the GitFlow branching model and Github integration as the version control model for Oakwood's projects.

###The main goals of this approach are:
* Keep our repositories history **very** organized, with easy access to specific release versions and hotfixes.
* Implement a limited complexitiy branching model (GitFlow) solid and scalable enough to handle all our projects.
* Provide an easy and clean way to work with externals contribuitors.

##Why should I read this document?
###This document will cover the basics of:
* Installing and getting started with git-flow.
* Starting a fresh repository with git-flow.
* Applying GitFlow to existing projects.
* Fetching from and pulling to *minieken* and *GitHub*.
* Keeping *minieken* and *GitHub* synced.

###This document will **not** cover:
* How to use git.
* How to use GitHub.
* How to manage minieken's repositories.
* How to manage Oakwood's account on Github.

##Before starting
It is **strongly** recomended that you have some basic notions of how git works before you start digging into anything on this page.
There are TONS of references online, and Github also has some nice tutorials. Just google it.
Also, feel free to chat wiht your collegues that have some experience with git. You can learn a lot from a coffee chitchat.

###Must see links (seriously)
* [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/) (Original blog post where GitFlow as presented)
* [Why aren't you using Git Flow?](http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/) (Article that opened my eyes to the neat git-flow tool for using the GitFlow model, a lot of the stuff mentioned there is going to be repated here, so don't worry if you don't grasp the now)
* [How to use a scalable Git branching model called git-flow](http://buildamodule.com/video/change-management-and-version-control-deploying-releases-features-and-fixes-with-git-how-to-use-a-scalable-git-branching-model-called-gitflow) (Nice visual representation of how GitFlow works)
* [On the path with git-flow](http://codesherpas.com/screencasts/on_the_path_gitflow.mov) (Very didactic screen cast with real world usage of git-flow)

Installing git-flow
-------------------
###How to install in from the source code in a Mac
   $ git clone --recursive git://github.com/nvie/gitflow.git
   $ cd gitflow
   $ sudo make install

This will install git-flow in /usr/local. And we are ready to go.

For more in depth information (different platforms, etc), follow the instructions of the [git-flow repository on GitHub](https://github.com/nvie/gitflow). There you will also find a lot of extra information about the project and all the other goodies GitHub provides.

Initializing git-flow on a newly created repository
---------------------------------------------------
###Clone it!
Considering a fresh repository (we are going to call it `example` here) into our internal version control server (`minieken`), clone it in your local machine with the usual:
    $ git clone git@minieken:example.git

###Initialize git-flow
We have to configure git-flow for the current repository before start using it.
    $ cd example
    $ git flow init


Now git-flow is going to ask you a couple of question about the default names for the master, develop, feature, release, hotfix and support branches. As the whole point of this guide is to create a solid standard for the version control model, you should just acept the default values.
So after you hit return a couple of times, your command line should look like this:
    $ No branches exist yet. Base branches must be created now.
    $ Branch name for production releases: [master] 
    $ Branch name for "next release" development: [develop] 
    $ How to name your supporting branch prefixes?
    $ Feature branches? [feature/] 
    $ Release branches? [release/] 
    $ Hotfix branches? [hotfix/] 
    $ Support branches? [support/] 
    $ Version tag prefix? []
You will be automatically checkout to the develop code, where you would start working normaly.
If you did your homework and checked out all the links listed in the beggining of this document, you should be starting to realized that not all of the development should occur on the develop branch itself, develop is place where the more "general" development occurs; it is the actual "central" branch where all the other contribuiters will be actually working from, so if you need to work on bigger more specialized changes (a.k.a. releases) you should do it on a *release* branch (:D yes, thats why they exist!). We will get more into how that works in a while...